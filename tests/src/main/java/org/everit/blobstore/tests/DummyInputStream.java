package org.everit.blobstore.tests;

import java.io.IOException;
import java.io.InputStream;

/**
 * {@link InputStream} class for testing purposes. This inputstream gives back bytes always incremented by one.
 */
public class DummyInputStream extends InputStream {

    private static final String LENGTH_LABEL = "length";

    /**
     * The max value of a byte if it is unsigned.
     */
    public static final int MAX_UNSIGNED_BYTE_VALUE = Byte.MAX_VALUE - Byte.MIN_VALUE;

    /**
     * Checks whether the content of the given inpustream could come from a Dummy input stream.
     *
     * @param is
     *            The buffer that will be checked for equality.
     * @param startPosition
     *            The starting position where the DummyStream should start.
     * @return true if the buffer could have been generated by this stream.
     * @throws IOException
     *             if an exception occurs during reading from the given {@link InputStream} parameter.
     */
    public static boolean couldBeFromDummyStream(final InputStream is, final long startPosition) throws IOException {
        DummyInputStream dummyStream = new DummyInputStream(Long.MAX_VALUE, startPosition);
        boolean result = true;
        for (int readByte = is.read(); (readByte >= 0) && result; readByte = is.read()) {
            int readFromDummy = dummyStream.read();
            if (readByte != readFromDummy) {
                result = false;
            }
        }
        dummyStream.close();
        return result;
    }

    /**
     * The value that will be retrieved next time.
     */
    private int currentValue = 0;

    /**
     * The number of available bytes till the end of the inputstream is reached.
     */
    private long available;

    /**
     * Constructor.
     *
     * @param length
     *            The length of this inputStream.
     * @param startingPosition
     *            the position where the dummy stream should be started. Basically the dummy stream starts with the
     *            value of this MOD divided by the max value.
     */
    public DummyInputStream(final long length, final long startingPosition) {
        super();
        currentValue = (int) (startingPosition % (MAX_UNSIGNED_BYTE_VALUE + 1));
        available = length;
    }

    @Override
    public void close() {
    }

    @Override
    public int read() {
        if (available == 0) {
            return -1;
        }
        available--;
        int result = currentValue;
        currentValue++;
        if (currentValue > MAX_UNSIGNED_BYTE_VALUE) {
            currentValue = 0;
        }
        return result;
    }
}
